# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Arbitrary object"""
scalar Any

type Book {
  id: ID!
  description: String
  title: String!
  author: String!
  publicationDate: DateTime!
  type: BookType!
  cover: ImageSizes
}

input BookInput {
  description: String
  title: String!
  author: String!
  publicationDate: DateTime!
  type: BookType!
}

enum BookType {
  Public
  Private
}

input ClientFilterInput {
  offset: Int
  limit: Int
  filter: Any
  search: String
  orderBy: OrderByInput
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input FetchBookCoverParam {
  id: String!
}

input FinalizeResetPasswordInput {
  newPassword: String!
  token: String!
  validationCode: Float!
}

type ImageSizes {
  sm: ID
  md: ID
  lg: ID
}

input LoginInput {
  """must be in email format"""
  email: String!
  password: String!
}

type Mutation {
  register(registerInput: UserInput!): Session!
  updatePassword(FinalizeResetPasswordInput: FinalizeResetPasswordInput!): Boolean!
  createBook(bookInput: BookInput!): Book!
  updateBook(bookInput: UpdateBookInput!, bookId: ID!): Book!
  removeBook(bookId: ID!): Boolean!
}

"""OrderBy direction"""
enum OrderByDirection {
  Asc
  Desc
}

input OrderByInput {
  property: String!
  direction: OrderByDirection!
}

type Query {
  fetchCurrentUser(userId: ID!): User!
  login(loginInput: LoginInput!): Session!
  resetPassword(email: String!): String!
  fetchBook(bookId: ID!): Book!
  fetchBooks(clientFilter: ClientFilterInput!): [Book!]!
}

type ResetPasswordCredentials {
  token: String!
  validationCode: Float!
}

type Session {
  token: String!
  user: User!
}

input StartResetPasswordInput {
  """must be in email format"""
  email: String!
}

input UpdateBookInput {
  description: String
  title: String!
  author: String!
  publicationDate: DateTime
  type: BookType!
}

input UpdateUserInput {
  id: String!
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
}

input UserInput {
  """must be in email format"""
  email: String!

  """must hold a value with length greater or equal to 1"""
  firstName: String!

  """must hold a value with length greater or equal to 1"""
  lastName: String!

  """
  must have 8 characters including at least 1 uppercase, 1 lowercase and 1 special character including numbers
  """
  password: String!
}
